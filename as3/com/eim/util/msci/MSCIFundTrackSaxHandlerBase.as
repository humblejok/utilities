/**
 * Generated by Gas3 v2.2.1 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (MSCIFundTrackSaxHandler.as).
 */

package com.eim.util.msci {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import mx.collections.ListCollectionView;
    import org.granite.collections.IMap;
    import org.w3c.dom.Node;

    [Bindable]
    public class MSCIFundTrackSaxHandlerBase implements IExternalizable {

        private var _currentFundDocument:XML;
        private var _currentFundId:String;
        private var _currentFundNode:Node;
        protected var _extractionDate:Date;
        protected var _fundIds:ListCollectionView;
        protected var _funds:IMap;
        protected var _listeners:ListCollectionView;
        protected var _loadAllFunds:Boolean;
        private var _nodePathStack:ListCollectionView;
        private var _skipCurrentFund:Boolean;

        [Bindable(event="unused")]
        public function get extractionDate():Date {
            return _extractionDate;
        }

        [Bindable(event="unused")]
        public function get funds():IMap {
            return _funds;
        }

        public function readExternal(input:IDataInput):void {
            _currentFundDocument = input.readObject() as XML;
            _currentFundId = input.readObject() as String;
            _currentFundNode = input.readObject() as Node;
            _extractionDate = input.readObject() as Date;
            _fundIds = input.readObject() as ListCollectionView;
            _funds = input.readObject() as IMap;
            _listeners = input.readObject() as ListCollectionView;
            _loadAllFunds = input.readObject() as Boolean;
            _nodePathStack = input.readObject() as ListCollectionView;
            _skipCurrentFund = input.readObject() as Boolean;
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(_currentFundDocument);
            output.writeObject(_currentFundId);
            output.writeObject(_currentFundNode);
            output.writeObject(_extractionDate);
            output.writeObject(_fundIds);
            output.writeObject(_funds);
            output.writeObject(_listeners);
            output.writeObject(_loadAllFunds);
            output.writeObject(_nodePathStack);
            output.writeObject(_skipCurrentFund);
        }
    }
}